var N=null,E="",T="t",U="u",searchIndex={};
var R=["string","result","invert","greyscale","ppm::pixel","ppm::image","to_owned","clone_into","try_from","try_into","borrow_mut","formatter"];
searchIndex["ppm"]={"doc":E,"i":[[0,"pixel","ppm",E,N,N],[3,"Pixel",R[4],"Pixel structure",N,N],[11,"new",E,"Create a new Pixel",0,[[["u8"]],["self"]]],[11,"red",E,"Get the red color of the pixel",0,[[["self"]],["u8"]]],[11,"green",E,"Get the green color of the pixel",0,[[["self"]],["u8"]]],[11,"blue",E,"Get the blue color of the pixel",0,[[["self"]],["u8"]]],[11,"display",E,"Get the pixel colors as a String",0,[[["self"]],[R[0]]]],[11,R[2],E,"Invert pixel colors",0,[[["self"]]]],[11,R[3],E,"Converts pixel to greyscale pixel",0,[[["self"]]]],[11,"eq",E,"Check if two pixels are identical",0,[[["pixel"]],["bool"]]],[0,"image","ppm",E,N,N],[3,"Image",R[5],"Image structure",N,N],[11,"new_empty",E,"Instantiate an Image with initial values",1,[[],["self"]]],[11,"set_type",E,"type setter",1,[[["self"],[R[0]]]]],[11,"set_width",E,"width setter",1,[[["self"],["usize"]]]],[11,"set_height",E,"height setter",1,[[["self"],["usize"]]]],[11,"set_nb_colors",E,"nb_colors setter",1,[[["self"],["usize"]]]],[11,"set_pixels",E,"pixels setter",1,[[["self"],["vec",["pixel"]],["pixel"]]]],[11,R[2],E,"Invert image pixels",1,[[["self"]]]],[11,R[3],E,"Convert image pixels to greyscale",1,[[["self"]]]],[11,"new_with_file",E,"Create a new Image from a ppm file",1,[[["path"]],[[R[0]],[R[1],[R[0]]]]]],[11,"new_with_file_bin",E,"Create a new Image from a binary encoded ppm file",1,[[["path"]],[[R[0]],[R[1],[R[0]]]]]],[11,"save",E,"Save an Image as ppn P3",1,[[["self"],["path"]],[R[1]]]],[11,"save_bin",E,"Save an Image as binary ppn P6",1,[[["self"],["path"]],[R[1]]]],[11,"into",R[4],E,0,[[],[U]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[8],E,E,0,[[[U]],[R[1]]]],[11,R[9],E,E,0,[[],[R[1]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"into",R[5],E,1,[[],[U]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[8],E,E,1,[[[U]],[R[1]]]],[11,R[9],E,E,1,[[],[R[1]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,"type_id",E,E,1,[[["self"]],["typeid"]]],[11,"clone",R[4],E,0,[[["self"]],["pixel"]]],[11,"clone",R[5],E,1,[[["self"]],["image"]]],[11,"eq",R[4],E,0,[[["self"],["pixel"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["pixel"]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[11]]],[R[1]]]],[11,"fmt",R[5],E,1,[[["self"],[R[11]]],[R[1]]]]],"p":[[3,"Pixel"],[3,"Image"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);